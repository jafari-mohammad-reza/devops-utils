filebeat.inputs:
  - type: log
    enabled: true
    paths:
      - /var/log/nginx/domain_access.json
    json.keys_under_root: true
    json.add_error_key: true

processors:
  - rename:
      fields:
        - from: "host"
          to: "filebeat_host"
      ignore_missing: true

  - rename:
      fields:
        - from: "nginx_host"
          to: "host"
      ignore_missing: true

  - script:
      lang: javascript
      source: >
        function process(event) {
          // List of all fields that might have empty strings or nulls
          var fieldsToCheck = [
            "client_ip", "x_real_ip", "content_length", "content_type",
            "http_authorization", "query_string", "x_forwarded_for",
            "accept", "accept_language", "accept_encoding", "referer"
          ];

          // Remove empty string and null fields
          for (var i = 0; i < fieldsToCheck.length; i++) {
            var field = fieldsToCheck[i];
            var value = event.Get(field);
            if (value === "" || value === null || value === undefined) {
              event.Delete(field);
            }
          }

          // Handle numeric fields that might be empty strings
          var numericFields = ["status", "bytes_sent", "request_length", "request_time"];
          for (var i = 0; i < numericFields.length; i++) {
            var field = numericFields[i];
            var value = event.Get(field);
            if (value === "" || value === null || value === undefined || isNaN(value)) {
              event.Delete(field);
            }
          }

          // JWT processing
          var cookie = event.Get("http_cookie");
          if (cookie && cookie !== "" && cookie !== null) {
            var tokenMatch = cookie.match(/token=([^;]+)/);
            if (tokenMatch && tokenMatch[1]) {
              var token = tokenMatch[1];
          event.Put("token", token);
              var parts = token.split('.');
              if (parts.length === 3) {
                try {
                  var payload = JSON.parse(base64UrlDecode(parts[1]));
                  if (payload) {
                    // Clean JWT payload as well
                    var jwtFields = ["sub", "iss", "r", "k", "iat", "exp"];
                    var cleanJwt = {};
                    for (var j = 0; j < jwtFields.length; j++) {
                      var jwtField = jwtFields[j];
                      if (payload[jwtField] !== undefined && payload[jwtField] !== null && payload[jwtField] !== "") {
                        cleanJwt[jwtField] = payload[jwtField];
                      }
                    }
                    if (Object.keys(cleanJwt).length > 0) {
                      event.Put("jwt", cleanJwt);
                    }
                  }
                } catch (e) {
                  // Ignore JWT parsing errors
                }
              }
            }
          }
        }

        function base64UrlDecode(str) {
          str = str.replace(/-/g, '+').replace(/_/g, '/');
          while (str.length % 4) {
            str += '=';
          }
          try {
            return atob(str);
          } catch (e) {
            return "";
          }
        }

  - drop_fields:
      fields: ["method", "referer", "x_forwarded_for", "accept", "accept_language", "accept_encoding", "upstream_time", "args", "http_cookie", "filebeat_host"]

output.elasticsearch:
  hosts: ["https://elastic:9200"]
  protocol: "https"
  username: "user"
  password: "passwd"
  ssl.verification_mode: none
  index: "nginx-%{+yyyy.MM.dd}"

setup.ilm.enabled: false
setup.template.enabled: false
